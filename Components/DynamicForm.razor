@using DynamicFormGenerator.Models
@using MudBlazor
@using System.Text.Json
@using System.ComponentModel.DataAnnotations
@using System.Text
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@* Creating dynamic Mud From *@
<MudForm Model="formData" @ref="mudForm" name="myForm">
    @foreach (var field in FormDefinition.Fields)
    {
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12" sm="8" md="6">
                @switch (field.Type)
                {
                    case "text":
                    case "email":
                        <MudTextField T="string"
                                      Label="@field.Label"
                                      Id="@($"field_{field.Label}")"
                                      Name="@($"field_{field.Label}")"
                                      Value="GetTextValue(field.Label)"
                                      ValueChanged="(string value) => UpdateTextField(field.Label, value)"
                                      Required="@field.Required"
                                      Validation="@(CreateValidationFunc(field))"
                                      FullWidth="true" />
                        break;
                    case "number":
                        <MudNumericField T="int?"
                                         Label="@field.Label"
                                         Id="@($"field_{field.Label}")"
                                         Name="@($"field_{field.Label}")"
                                         Value="GetNumberValue(field.Label)"
                                         ValueChanged="(int? value) => ValidateAndUpdateNumberField(field.Label, value)"
                                         Required="@field.Required"
                                         Validation="@(CreateNumberValidationFunc(field))"
                                         FullWidth="true" />
                        break;
                    case "dropdown":
                        <MudSelect T="string"
                                   Label="@field.Label"
                                   Id="@($"field_{field.Label}")"
                                   Name="@($"field_{field.Label}")"
                                   Value="@(formData[field.Label] as string ?? string.Empty)"
                                   ValueChanged="@((string value) => UpdateDropdownField(field.Label, value))"
                                   Required="@field.Required"
                                   FullWidth="true">
                            @foreach (var option in field.Values ?? Enumerable.Empty<string>())
                            {
                                <MudSelectItem Value="@option">@option</MudSelectItem>
                            }
                        </MudSelect>
                        break;
                    case "checkbox":
                        <MudCheckBox T="bool"
                                     Label="@field.Label"
                                     Id="@($"field_{field.Label}")"
                                     Checked="GetCheckboxValue(field.Label)"
                                     CheckedChanged="(bool value) => UpdateCheckboxField(field.Label, value)"
                                     Required="@field.Required" />
                        break;
                }
            </MudItem>
        </MudGrid>
    }

    <MudStack Class="custom-button-container">
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   OnClick="SubmitForm"
                   FullWidth="true"
                   Class="custom-button">
            Submit
        </MudButton>
    </MudStack>
</MudForm>

@code {
    private MudForm? mudForm;
    [Parameter] public FormConfig FormDefinition { get; set; } = new();
    private Dictionary<string, object?> formData = new();
    [Inject] IJSRuntime? JS { get; set; }

    protected override void OnInitialized()
    {
        // Initialize dictionary with default values
        foreach (var field in FormDefinition.Fields!)
        {
            formData[field.Label!] = field.Type! switch
            {
                "text" => "",
                "email" => "",
                "number" => (object?)null,
                "checkbox" => false,
                "dropdown" => (field.Values?.FirstOrDefault() ?? ""),
                _ => ""
            };
        }
    }

    #region Validation Functions

    // Create validation for text and email fields 
    private Func<string, string?> CreateValidationFunc(dynamic field)
    {
        return value =>
        {
            // Required validation
            if (field.Required && string.IsNullOrWhiteSpace(value))
                return "This field is required.";

            // Email validation
            if (field.Type == "email" && !string.IsNullOrWhiteSpace(value))
            {
                try
                {
                    var addr = new System.Net.Mail.MailAddress(value);
                    return addr.Address == value ? null : "Invalid email format.";
                }
                catch
                {
                    return "Invalid email format.";
                }
            }

            return null;
        };
    }

    // Validation for number fields
    private Func<int?, string?> CreateNumberValidationFunc(dynamic field)
    {
        return value =>
        {
            // If required and empty, show message
            if (field.Required && value == null)
                return "This field is required.";

            // If value is null or not a number, show error
            if (value == null)
                return "Only numeric values are allowed.";

            // Min/Max validation
            if (field.Min != null && value < field.Min)
                return $"Value must be at least {field.Min}.";

            if (field.Max != null && value > field.Max)
                return $"Value must be at most {field.Max}.";

            return null;
        };
    }

    #endregion

    #region Data Handling Methods

    private string GetTextValue(string label)
    {
        return formData.TryGetValue(label, out var value) ? value as string ?? "" : "";
    }

    private void UpdateTextField(string label, string value)
    {
        formData[label] = value;
    }

    private int? GetNumberValue(string label)
    {
        return formData.TryGetValue(label, out var value) && value is int intValue ? intValue : (int?)null;
    }

    private void ValidateAndUpdateNumberField(string label, int? value)
    {
        if (value == null)
        {
            formData[label] = null;
        }
        else
        {
            formData[label] = value;
        }
    }

    private void UpdateDropdownField(string label, string value)
    {
        formData[label] = value;
    }

    private bool GetCheckboxValue(string label)
    {
        return formData.TryGetValue(label, out var value) && value is bool boolValue ? boolValue : false;
    }

    private void UpdateCheckboxField(string label, bool value)
    {
        formData[label] = value;
    }

    #endregion

    #region Form Submission

    // Handle form submission
    private async Task SubmitForm()
    {
        if (mudForm is null) return; // Ensure mudForm is initialized

        await mudForm.Validate(); // Trigger validation

        if (mudForm.IsValid) // Check if form is valid
        {
            var submissionData = new Dictionary<string, object>();

            foreach (var kvp in formData)
            {
                object convertedValue = kvp.Value switch
                {
                    bool boolValue => boolValue,
                    int intValue => intValue,
                    null => "",
                    _ => kvp.Value?.ToString() ?? ""
                };
                submissionData[kvp.Key] = convertedValue;
            }

            string jsonString = JsonSerializer.Serialize(submissionData, new JsonSerializerOptions
                {
                    WriteIndented = true
                });

            // Formatting message to follow JSON format for Snackbar 
            string formattedMessage = $"Form Submitted:<br><br>{string.Join("<br>", jsonString.Split(Environment.NewLine))}";

            Snackbar.Add((MarkupString)formattedMessage, Severity.Success, config =>
            {
                config.CloseAfterNavigation = false;
                config.VisibleStateDuration = 6000;
            });

            if (JS != null)
            {
                await JS.InvokeVoidAsync("console.log", $"Form Submitted:\n{jsonString}");
            }

            byte[] fileBytes = Encoding.UTF8.GetBytes(jsonString);
            using var streamRef = new DotNetStreamReference(new MemoryStream(fileBytes));

            if (JS != null)
            {
                await JS.InvokeVoidAsync("downloadFile", "FormData.json", streamRef);
            }
        }
        else
        {
            Snackbar.Add("Form validation failed. Please check required fields.", Severity.Error);
        }
    }

    #endregion
}
